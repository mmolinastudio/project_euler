define(function() {

	var euler = {
		info: [{
			functionName: "multiplesOf3And5",
			solved: true,
			dependences: null,
			title: "1. Multiples of 3 and 5",
			description: "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.<br/>Find the sum of all the multiples of 3 or 5 below 1000."
		}, {
			functionName: "evenFibonacciNumbers",
			solved: true,
			dependences: null,
			title: "2. Even Fibonacci numbers",
			description: "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1,2,3,5,8,13,21,34,55,89,...<br/>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."
		}, {
			functionName: "largestPrimeFactor",
			solved: true,
			dependences: ["getPrimes"],
			title: "3. Largest prime factor",
			description: "The prime factors of 13195 are 5, 7, 13 and 29.<br/>What is the largest prime factor of the number 600851475143?"
		}, {
			functionName: "largestPalindromeProduct",
			solved: true,
			dependences: ["isPalindrome"],
			title: "4. Largest palindrome product",
			description: "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.<br/>Find the largest palindrome made from the product of two 3-digit numbers."
		}, {
			functionName: "smallestMultiple",
			solved: true,
			dependences: ["getPrimes", "primeFactorDecomposition", "posInArray2D"],
			title: "5. Smallest multiple",
			description: "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.<br/>What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?"
		}],
		/************* Problema 1 **************/
		multiplesOf3And5: function multiplesOf3And5() {
			var sol = 0;
			for (var i = 0; i < 1000; i++) {
				if ((i % 3 === 0) || (i % 5 === 0)) {
					sol += i;
				}
			}
			return sol;
		},

		/************* Problema 2 **************/
		//Even Fibonacci numbers
		evenFibonacciNumbers: function evenFibonacciNumbers(lim) {
			var limit = lim || 4000000;
			var before = 1;
			var current = 2;
			var next = 0;
			var sol = current; //not before + current, cause before isn't even.

			do {
				next = before + current;
				if (next % 2 === 0) {
					sol += next;
				}
				before = current;
				current = next;
			} while (next < limit);

			return sol;
		},

		/************* Problema 3 **************/
		getPrimes: function getPrimes(max) {
			var sieve = [];
			var i = [];
			var j = [];
			var primes = [];
			for (i = 2; i <= max; ++i) {
				if (!sieve[i]) {
					// i has not been marked -- it is prime
					primes.push(i);
					for (j = i << 1; j <= max; j += i) {
						sieve[j] = true;
					}
				}
			}
			return primes;
		},
		largestPrimeFactor: function largestPrimeFactor(n) {
			var num = n || 600851475143; // + 600851475143
			var primes = this.getPrimes(2000); //array[2,3,5,7,11,...]
			//descomponemos num en factores primos
			do {
				if (num % primes[0] !== 0) {
					primes.splice(0, 1); //elimina el primer elemnto del array
				} else {
					num = num / primes[0];
				}
			} while ((primes.length > 0) && (primes[0] <= num));

			return num;
		},

		/************* Problema 4 **************/
		isPalindrome: function isPalindrome(n) {
			var num = n.toString();

			var esPalindromo = true;
			for (var i = 0, j = num.length;
				(i <= (j - 1)) && esPalindromo; i++, j--) {
				if (num[i] !== num[j - 1]) {
					esPalindromo = false;
				}
			}
			return esPalindromo;
		},
		largestPalindromeProduct: function largestPalindromeProduct(n) {
			var exp = n || 3;
			var limitMax = Math.pow(10, exp) - 1; // 999
			var limitMin = Math.pow(10, exp - 1); // 100
			var sol = {
				i: 0,
				j: 0,
				mul: 0
			};
			for (var i = limitMax; i > limitMin; i--) {
				for (var j = limitMax; j > limitMin; j--) {
					var mul = j * i;
					if (this.isPalindrome(mul) && (mul > sol.mul)) {
						sol.mul = mul;
						sol.i = i;
						sol.j = j;
					}
				}
			}
			return sol.i + " * " + sol.j + " = " + sol.mul;
		},

		/************* Problema 5 **************/
		/*smallestMultiple: function smallestMultiple(n, c, lim) {
			if (n <= 1) {
				return lim;
			} else {
				var baseNum = n || 10;
				var baseCounter = c || 2;
				var limit = lim || baseNum * baseCounter;
				var finded = false;
				var exit = false;
				do {
					if (baseNum * baseCounter === limit) {
						finded = this.smallestMultiple(baseNum - 1, baseCounter + 1, limit);
					}
					baseCounter++;
					if (baseNum * baseCounter > limit) {
						if (n !== undefined) {
							exit = true;
						} else {
							limit = baseNum * baseCounter;
						}
					}
				} while ((finded === false) && !exit);

				return finded;
			}
		},*/
		primeFactorDecomposition: function primeFactorDecomposition(n, pri) {
			var num = n;
			var sol = [];
			var c = 0;
			var primes = pri || this.getPrimes(num); //array[2,3,5,7,11,...]

			do {

				if (num % primes[0] !== 0) {
					primes.splice(0, 1); //elimina el primer elemnto del array
				} else {
					sol[c] = primes[0];
					c++;
					num = num / primes[0];
				}
			} while (primes[0] <= num);

			return sol;
		},
		posInArray2D: function posInArray2D(arr, elem) {
			for (var i = 0; i < arr.length; i++) {
				if ((arr[i].length > 0) && (arr[i][0] === elem)) {
					return i;
				}
			}
			return -1;
		},
		smallestMultiple: function smallestMultiple(n) {
			var num = n || 20;
			var primes = this.getPrimes(num);

			// Decomposition of prime factors for all numbers from 1 to n
			// var primeFactors = [[2],[3],[2, 2],[5],[2, 3],[7],[2, 2, 2],[3, 3],[2, 5],[11],[2, 2, 3],[13],[2, 7],[3, 5],[2, 2, 2, 2],[17],[2, 3, 3],[19],[2, 2, 5]];
			var primeFactors = [];
			var i = null;
			var j = null;
			var sol = 1;
			for (i = 2; i <= num; i++) {
				primeFactors.push(this.primeFactorDecomposition(i, primes.slice(0)));
			}

			// select "common" and "no common" factors with "max exponent"
			// var arrMaxExp = [[2, 2, 2, 2],[3, 3],[5],[7],[11],[13],[17],[19]];
			var arrMaxExp = [];
			var posArr = -1;
			var posSubArr = -1;
			var currentPrime = 0
			for (i = 0; i < primeFactors.length; i++) {
				for (j = 0; j < primeFactors[i].length; j++) {
					if (currentPrime < primeFactors[i][j]) {
						currentPrime = primeFactors[i][j];
						posArr = this.posInArray2D(arrMaxExp, currentPrime);
						posSubArr = 0;
					}
					if (posArr < 0) {
						posArr = arrMaxExp.length;
						arrMaxExp[posArr] = [currentPrime];
					} else {
						arrMaxExp[posArr][posSubArr] = currentPrime;
					}
					posSubArr++;
				}
				currentPrime = 0;
				posSubArr = 0;
			}

			// and multiply all numbers
			for (i = 0; i < arrMaxExp.length; i++) {
				for (j = 0; j < arrMaxExp[i].length; j++) {
					sol = sol * arrMaxExp[i][j];
				}
			}

			return sol;
		}
	}

	return euler;
});